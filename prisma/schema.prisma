generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Test {
  id String @id @default(cuid())

  kit KitEnum @unique

  questions Question[]

  @@map("test")
}

model Question {
  id          String   @id @default(cuid())
  arrangement Int
  text        String
  answers     Answer[]

  test   Test?   @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId String?

  @@map("question")
}

model Answer {
  id          String  @id @default(cuid())
  arrangement Int
  text        String
  isCorrect   Boolean

  question   Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String?

  @@map("answer")
}

model UserTests {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  grade        GradeEnum
  wrongAnswers UserTestWrongAnswers[]

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  @@map("user_tests")
}

model UserTestWrongAnswers {
  id String @id @default(cuid())

  question            String?
  questionArrangement Int?

  answer            String?
  answerArrangement Int?

  UserTests   UserTests? @relation(fields: [userTestsId], references: [id], onDelete: Cascade)
  userTestsId String?

  @@map("user_test_wrong_answers")
}

enum GradeEnum {
  S
  A
  B
  C
  D
  F
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  accounts      Account[]
  sessions      Session[]

  applications Application[]

  role UserEnum @default(guest)

  kit KitEnum?

  steamId String?

  competitive CompetitiveEnum?

  userTests UserTests[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Application {
  id String @id @default(cuid())

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  name    String
  kit     KitEnum
  steamId String
  hours   String
  reason  String

  status ApplicationStatusEnum @default(pending)

  @@map("application")
}

enum ApplicationStatusEnum {
  none
  pending
  denied
  approved
}

enum UserEnum {
  guest
  member
  admin
  owner
}

enum KitEnum {
  SL
  ENG
  LAT
  RFL
  MD
}

enum CompetitiveEnum {
  FRONT
  RESERVE
}
